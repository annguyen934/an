function mainMenu()
  local choices = gg.choice({
    "1. đặt chuồng mọi nơi",
    "2. ez arena",
    "3. luyen rank r",
    "4. ez resuce",
    "5.hack lv rong",
    "6.luyện skill",
    "7. Thoát"
  }, nil, "=== bố an vĩ đại vcl ===")

  if choices == 1 then
    antireload()
  elseif choices == 2 then
    arena()
  elseif choices == 3 then
    luyenrank()
  elseif choices == 4 then
    rescue()
    elseif choices == 5 then
    levr()
    elseif choices == 6 then
    luyensk()
  elseif choices == 7 then
    os.exit()
  else
    gg.toast("nguu")
  end
end

function antireload()
gg.setRanges(gg.REGION_C_ALLOC)
            gg.searchNumber("-300~300F;1 086 324 736;1 086 324 736::9", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
            gg.refineNumber("1 086 324 736", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
            gg.getResults(5000)
            gg.editAll("0", gg.TYPE_DWORD)
            gg.clearResults()
            gg.setRanges(gg.REGION_C_ALLOC)
            gg.searchNumber("-300~300F;1 084 227 584;1 084 227 584::9", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
            gg.refineNumber("1 084 227 584", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
            gg.getResults(5000)
            gg.editAll("0", gg.TYPE_DWORD)
            gg.clearResults()
            end

function arena()
  local input = gg.prompt(
    {
      "code rồng1:",
      "lev rồng 1:",
      "sao rồng 1:",
      "code rồng 2:",
      "lev rồng 2:",
      "sao rồng 2:",
      "code rồng 3:",
      "lev rồng 3:",
      "sao rồng 3:"
    },
    nil,
    {
      "number", "number", "number",
      "number", "number", "number",
      "number", "number", "number"
    }
  )

  if input == nil then
    gg.toast("ngu")
    return
  end

  local pattern = table.concat(input, ";") .. "::" -- Gộp thành chuỗi tìm kiếm
  gg.searchNumber(pattern, gg.TYPE_DWORD)
  gg.getResults(5000)
            gg.editAll("1011;1;0;1011;1;0;1011;1;0", gg.TYPE_DWORD)
  local ketQua = gg.getResultsCount()

  if ketQua > 0 then
    gg.toast("Đã tìm thấy " .. ketQua .. " kết quả.")
  else
    gg.alert("đéo tìm thấy mẹ gì")
    gg.getResults(5000)
            gg.editAll("1011;1;0;1011;1;0;1011;1;0", gg.TYPE_DWORD)
            gg.clearResults()
  end
end

function luyenrank()
  local input = gg.prompt(
    {
      "code rồng1:",
      "lev rồng 1:",
      "sao rồng 1:",
      "code rồng 2:",
      "lev rồng 2:",
      "sao rồng 2:",
      "code rồng 3:",
      "lev rồng 3:",
      "sao rồng 3:"
    },
    nil,
    {
      "number", "number", "number",
      "number", "number", "number",
      "number", "number", "number"
    }
  )

  if input == nil then
    gg.toast("ngu")
    return
  end

  local pattern = table.concat(input, ";") .. "::" -- Gộp thành chuỗi tìm kiếm
  gg.searchNumber(pattern, gg.TYPE_DWORD)
  gg.getResults(5000)
            gg.editAll("1011;1;0;1011;1;0;3266;3266;5", gg.TYPE_DWORD)
  local ketQua = gg.getResultsCount()

  if ketQua > 0 then
    gg.toast("Đã tìm thấy " .. ketQua .. " kết quả.")
  else
    gg.alert("đéo tìm thấy mẹ gì")
    gg.getResults(5000)
            gg.editAll("1011;1;0;1011;1;0;3266;3266;5", gg.TYPE_DWORD)
            gg.clearResults()
  end
  end

function rescue()
gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC | gg.REGION_ANONYMOUS)
    gg.searchNumber("1000~5600;-1;10~70;0~5::17", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber("1000~5600;-1;10~70::10", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber("1000~5600;10~70::10", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.getResults(99999)
    gg.editAll("1011;1", gg.TYPE_DWORD)
      gg.clearResults()
      end
function levr()
-- Hàm lấy dữ liệu rồng từ web
function fetchDragonData()
    local response = gg.makeRequest("https://raw.githubusercontent.com/annguyen934/an/refs/heads/main/dsrong")
    if not response or not response.content then
        gg.alert("Không tải được dữ liệu rồng!")
        return nil
    end
    local data = {}
    for line in response.content:gmatch("[^\r\n]+") do
        local code, name = line:match("^(%d+)%s*%-*%s*(.+)$")
        if code and name then
            table.insert(data, {code = tonumber(code), name = name})
        end
    end
    return #data > 0 and data or nil
end

-- Hàm lọc danh sách rồng theo tên nhập vào
function filterDragonList(data, keyword)
    local filtered = {}
    keyword = keyword:lower()
    for _, d in ipairs(data) do
        if d.name:lower():find(keyword, 1, true) then
            table.insert(filtered, d)
        end
    end
    return filtered
end

-- Hàm chọn rồng từ danh sách (show choice)
function chooseDragon(data)
    local list = {}
    for _, d in ipairs(data) do
        table.insert(list, d.code .. " - " .. d.name)
    end
    local choice = gg.choice(list, nil, "Chọn rồng:")
    if choice then
        return data[choice].code
    end
    return nil
end

-- Hàm nhập tên rồng, lọc danh sách rồi chọn
function inputAndChooseDragon()
    local data = fetchDragonData()
    if not data then return nil end

    local input = gg.prompt({"Nhập tên rồng để tìm:"}, {""}, {"text"})
    if not input then return nil end

    local filtered = filterDragonList(data, input[1])
    if #filtered == 0 then
        gg.alert("Không tìm thấy rồng nào phù hợp.")
        return nil
    end

    return chooseDragon(filtered)
end

-- Hàm chính
function main()
    local input1 = inputAndChooseDragon()
    if not input1 then return end

    gg.clearResults()
    gg.searchNumber(tostring(input1) .. ";-1;0::", gg.TYPE_DWORD)
    gg.refineNumber(tostring(input1), gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1)
    local results = gg.getResults(100)
    if #results == 0 then
        gg.alert("Không tìm thấy chuỗi cần tìm!")
        return
    end

    for i, v in ipairs(results) do
        if v.value == input1 then
            v.value = input1
        end
    end
    gg.setValues(results)

    local extra = {}
    for i, v in ipairs(results) do
        table.insert(extra, {
            address = v.address + 4 * 3,
            flags = gg.TYPE_DWORD,
            value = i
        })
    end
    gg.setValues(extra)
    gg.toast("Đã xử lý xong mã rồng: " .. input1)
end

main()
end
function luyensk()
  local skillChoice = gg.choice({
    "1. Luyện Skill 1",
    "2. Luyện Skill 2",
    "3. Luyện Skill 3",
    "4. Luyện Skill 4"
  }, nil, "Lên web mà tra code rồng")

  if skillChoice == 1 then
    skilldau()
  elseif skillChoice == 2 then
    skillhai()
  elseif skillChoice == 3 then
    skillba()
  elseif skillChoice == 4 then
    skillbon()
  else
    gg.toast("cmm đéo chọn à")
  end
end
    function skilldau()
    gg.alert("luyện skill 1")

-- Lấy dữ liệu rồng từ trang web
function fetchDragonData()
    local response = gg.makeRequest("https://raw.githubusercontent.com/annguyen934/an/refs/heads/main/dsrong")
    if not response or not response.content then
        gg.alert("Không tải được dữ liệu rồng!")
        return nil
    end
    local data = {}
    for line in response.content:gmatch("[^\r\n]+") do
        local code, name = line:match("^(%d+)%s*%-*%s*(.+)$")
        if code and name then
            table.insert(data, {code = code, name = name})
        end
    end
    return #data > 0 and data or nil
end

-- Tìm và chọn rồng theo tên, trả về code số nguyên
function searchDragonCode(data)
    local input = gg.prompt({"Nhập tên rồng:"}, {""}, {"text"})
    if not input then return nil end
    local searchTerm = input[1]:lower()
    local list, codes = {}, {}
    for _, d in ipairs(data) do
        if d.name:lower():find(searchTerm, 1, true) then
            table.insert(list, d.code .. " - " .. d.name)
            table.insert(codes, d.code)
        end
    end
    if #list == 0 then
        gg.alert("Không tìm thấy rồng.")
        return nil
    end
    local choice = gg.choice(list, nil, "Chọn rồng:")
    return choice and tonumber(codes[choice]) or nil
end

-- Tìm và sửa dãy input1;-1;0:: thành 1011,1012,... rồi ẩn GG
function handleInput1AndReplace()
    local data = fetchDragonData()
    if not data then return nil end
    local input1 = searchDragonCode(data)
    if not input1 then return nil end

    gg.clearResults()
    local searchStr = tostring(input1) .. ";-1;0::"
    gg.searchNumber(searchStr, gg.TYPE_DWORD)
    gg.refineNumber(tostring(input1), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("k thấy")
        return nil
    end
    for i = 1, #results do
        results[i].value = 1010 + i -- 1011, 1012,...
    end
    gg.setValues(results)
    gg.setVisible(false)
    return results, input1
end

-- Khi người mở lại GG, nhập input2, lọc và sửa thành input1, copy offset
function onGGVisible(input1)
    local data = fetchDragonData()
    if not data then return end
    local input2 = searchDragonCode(data)
    if not input2 then return end

    gg.refineNumber(tostring(input2), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("đéo thấy")
        return
    end
    -- Sửa tất cả giá trị input2 thành input1 ban đầu
    for i = 1, #results do
        results[i].value = input1
    end
    gg.setValues(results)

    -- Tìm địa chỉ chứa input1
    local baseEntry = nil
    for _, r in ipairs(results) do
        if r.value == input1 then
            baseEntry = r
            break
        end
    end
    if not baseEntry then
        gg.alert("đéo thăy")
        return
    end

    gg.gotoAddress(baseEntry.address)

    -- Tính địa chỉ offset theo byte (DWORD = 4 bytes)
    local addr_base = baseEntry.address
    local offset12_addr = addr_base + 12 * 4
    local offset13_addr = addr_base + 13 * 4
    local offset14_addr = addr_base + 14 * 4
    local offset15_addr = addr_base + 15 * 4

    -- Lấy giá trị offset 12
    local val12_res = gg.getValues({{address=offset12_addr, flags=gg.TYPE_DWORD, count=1}})
    if not val12_res or not val12_res[1] then
        gg.alert("Không lấy được giá trị offset 12.")
        return
    end
    local val12 = val12_res[1].value

    -- Gán giá trị offset 12 vào offset 13,14,15
    local setVals = {
        {address=offset13_addr, flags=gg.TYPE_DWORD, value=val12},
        {address=offset14_addr, flags=gg.TYPE_DWORD, value=val12},
        {address=offset15_addr, flags=gg.TYPE_DWORD, value=val12},
    }
    gg.setValues(setVals)
    gg.toast("ok r")
end

-- Main
local started = false
local input1Global = nil

function main()
    local results, input1 = handleInput1AndReplace()
    if results then
        started = true
        input1Global = input1
        gg.toast("Đã xử lý input1. Mở GG để tiếp tục thao tác input2.")
    end
end

main()

while true do
    if gg.isVisible(true) and started then
        gg.setVisible(false)
        onGGVisible(input1Global)
        started = false
    end
    end
    end
function skillhai()
gg.alert("luyện skill 2")

-- Lấy dữ liệu rồng từ trang web
function fetchDragonData()
    local response = gg.makeRequest("https://raw.githubusercontent.com/annguyen934/an/refs/heads/main/dsrong")
    if not response or not response.content then
        gg.alert("Không tải được dữ liệu rồng!")
        return nil
    end
    local data = {}
    for line in response.content:gmatch("[^\r\n]+") do
        local code, name = line:match("^(%d+)%s*%-*%s*(.+)$")
        if code and name then
            table.insert(data, {code = code, name = name})
        end
    end
    return #data > 0 and data or nil
end

-- Tìm và chọn rồng theo tên, trả về code số nguyên
function searchDragonCode(data)
    local input = gg.prompt({"Nhập tên rồng:"}, {""}, {"text"})
    if not input then return nil end
    local searchTerm = input[1]:lower()
    local list, codes = {}, {}
    for _, d in ipairs(data) do
        if d.name:lower():find(searchTerm, 1, true) then
            table.insert(list, d.code .. " - " .. d.name)
            table.insert(codes, d.code)
        end
    end
    if #list == 0 then
        gg.alert("Không tìm thấy rồng.")
        return nil
    end
    local choice = gg.choice(list, nil, "Chọn rồng:")
    return choice and tonumber(codes[choice]) or nil
end

-- Tìm và sửa dãy input1;-1;0:: thành 1011,1012,... rồi ẩn GG
function handleInput1AndReplace()
    local data = fetchDragonData()
    if not data then return nil end
    local input1 = searchDragonCode(data)
    if not input1 then return nil end

    gg.clearResults()
    local searchStr = tostring(input1) .. ";-1;0::"
    gg.searchNumber(searchStr, gg.TYPE_DWORD)
    gg.refineNumber(tostring(input1), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("k thấy")
        return nil
    end
    for i = 1, #results do
        results[i].value = 1010 + i -- 1011, 1012,...
    end
    gg.setValues(results)
    gg.setVisible(false)
    return results, input1
end

-- Khi người mở lại GG, nhập input2, lọc và sửa thành input1, copy offset
function onGGVisible(input1)
    local data = fetchDragonData()
    if not data then return end
    local input2 = searchDragonCode(data)
    if not input2 then return end

    gg.refineNumber(tostring(input2), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("k thấy")
        return
    end
    -- Sửa tất cả giá trị input2 thành input1 ban đầu
    for i = 1, #results do
        results[i].value = input1
    end
    gg.setValues(results)

    -- Tìm địa chỉ chứa input1
    local baseEntry = nil
    for _, r in ipairs(results) do
        if r.value == input1 then
            baseEntry = r
            break
        end
    end
    if not baseEntry then
        gg.alert("k thấy")
        return
    end

    gg.gotoAddress(baseEntry.address)

    -- Tính địa chỉ offset theo byte (DWORD = 4 bytes)
    local addr_base = baseEntry.address
    local offset12_addr = addr_base + 12 * 4
    local offset13_addr = addr_base + 13 * 4
    local offset14_addr = addr_base + 14 * 4
    local offset15_addr = addr_base + 15 * 4

    -- Lấy giá trị offset 13
    local val13_res = gg.getValues({{address=offset13_addr, flags=gg.TYPE_DWORD, count=1}})
    if not val13_res or not val13_res[1] then
        gg.alert("k thấy")
        return
    end
    local val13 = val13_res[1].value

    -- Gán giá trị offset 13 vào offset 12,14,15
    local setVals = {
        {address=offset12_addr, flags=gg.TYPE_DWORD, value=val13},
        {address=offset14_addr, flags=gg.TYPE_DWORD, value=val13},
        {address=offset15_addr, flags=gg.TYPE_DWORD, value=val13},
    }
    gg.setValues(setVals)
    gg.toast("xong")
end

-- Main
local started = false
local input1Global = nil

function main()
    local results, input1 = handleInput1AndReplace()
    if results then
        started = true
        input1Global = input1
        gg.toast("xong")
    end
end

main()

while true do
    if gg.isVisible(true) and started then
        gg.setVisible(false)
        onGGVisible(input1Global)
        started = false
    end
end
end
function skillba()
gg.alert("skill 3")

-- Lấy dữ liệu rồng từ trang web
function fetchDragonData()
    local response = gg.makeRequest("https://raw.githubusercontent.com/annguyen934/an/refs/heads/main/dsrong")
    if not response or not response.content then
        gg.alert("Không tải được dữ liệu rồng!")
        return nil
    end
    local data = {}
    for line in response.content:gmatch("[^\r\n]+") do
        local code, name = line:match("^(%d+)%s*%-*%s*(.+)$")
        if code and name then
            table.insert(data, {code = code, name = name})
        end
    end
    return #data > 0 and data or nil
end

-- Tìm và chọn rồng theo tên, trả về code số nguyên
function searchDragonCode(data)
    local input = gg.prompt({"Nhập tên rồng:"}, {""}, {"text"})
    if not input then return nil end
    local searchTerm = input[1]:lower()
    local list, codes = {}, {}
    for _, d in ipairs(data) do
        if d.name:lower():find(searchTerm, 1, true) then
            table.insert(list, d.code .. " - " .. d.name)
            table.insert(codes, d.code)
        end
    end
    if #list == 0 then
        gg.alert("Không tìm thấy rồng.")
        return nil
    end
    local choice = gg.choice(list, nil, "Chọn rồng:")
    return choice and tonumber(codes[choice]) or nil
end

-- Tìm và sửa dãy input1;-1;0:: thành 1011,1012,... rồi ẩn GG
function handleInput1AndReplace()
    local data = fetchDragonData()
    if not data then return nil end
    local input1 = searchDragonCode(data)
    if not input1 then return nil end

    gg.clearResults()
    local searchStr = tostring(input1) .. ";-1;0::"
    gg.searchNumber(searchStr, gg.TYPE_DWORD)
    gg.refineNumber(tostring(input1), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("Không tìm thấy chuỗi cần tìm với input1!")
        return nil
    end
    for i = 1, #results do
        results[i].value = 1010 + i -- 1011, 1012,...
    end
    gg.setValues(results)
    gg.setVisible(false)
    return results, input1
end

-- Khi người mở lại GG, nhập input2, lọc và sửa thành input1, copy offset
function onGGVisible(input1)
    local data = fetchDragonData()
    if not data then return end
    local input2 = searchDragonCode(data)
    if not input2 then return end

    gg.refineNumber(tostring(input2), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("Không tìm thấy input2 trong bộ nhớ!")
        return
    end
    -- Sửa tất cả giá trị input2 thành input1 ban đầu
    for i = 1, #results do
        results[i].value = input1
    end
    gg.setValues(results)

    -- Tìm địa chỉ chứa input1
    local baseEntry = nil
    for _, r in ipairs(results) do
        if r.value == input1 then
            baseEntry = r
            break
        end
    end
    if not baseEntry then
        gg.alert("Không tìm thấy địa chỉ chứa input1!")
        return
    end

    gg.gotoAddress(baseEntry.address)

    -- Tính địa chỉ offset theo byte (DWORD = 4 bytes)
    local addr_base = baseEntry.address
    local offset12_addr = addr_base + 12 * 4
    local offset13_addr = addr_base + 13 * 4
    local offset14_addr = addr_base + 14 * 4
    local offset15_addr = addr_base + 15 * 4

    -- Lấy giá trị offset 14
    local val14_res = gg.getValues({{address=offset14_addr, flags=gg.TYPE_DWORD, count=1}})
    if not val14_res or not val14_res[1] then
        gg.alert("Không lấy được giá trị offset 14.")
        return
    end
    local val14 = val14_res[1].value

    -- Gán giá trị offset 14 vào offset 12,13,15
    local setVals = {
        {address=offset12_addr, flags=gg.TYPE_DWORD, value=val14},
        {address=offset13_addr, flags=gg.TYPE_DWORD, value=val14},
        {address=offset15_addr, flags=gg.TYPE_DWORD, value=val14},
    }
    gg.setValues(setVals)
    gg.toast("Đã sao chép offset 14 vào 12, 13, 15.")
end

-- Main
local started = false
local input1Global = nil

function main()
    local results, input1 = handleInput1AndReplace()
    if results then
        started = true
        input1Global = input1
        gg.toast("Đã xử lý input1. Mở GG để tiếp tục thao tác input2.")
    end
end

main()

while true do
    if gg.isVisible(true) and started then
        gg.setVisible(false)
        onGGVisible(input1Global)
        started = false
    end
end
end
function skillbon()
gg.alert("skill 4")

-- Lấy dữ liệu rồng từ trang web
function fetchDragonData()
    local response = gg.makeRequest("https://raw.githubusercontent.com/annguyen934/an/refs/heads/main/dsrong")
    if not response or not response.content then
        gg.alert("Không tải được dữ liệu rồng!")
        return nil
    end
    local data = {}
    for line in response.content:gmatch("[^\r\n]+") do
        local code, name = line:match("^(%d+)%s*%-*%s*(.+)$")
        if code and name then
            table.insert(data, {code = code, name = name})
        end
    end
    return #data > 0 and data or nil
end

-- Tìm và chọn rồng theo tên, trả về code số nguyên
function searchDragonCode(data)
    local input = gg.prompt({"Nhập tên rồng:"}, {""}, {"text"})
    if not input then return nil end
    local searchTerm = input[1]:lower()
    local list, codes = {}, {}
    for _, d in ipairs(data) do
        if d.name:lower():find(searchTerm, 1, true) then
            table.insert(list, d.code .. " - " .. d.name)
            table.insert(codes, d.code)
        end
    end
    if #list == 0 then
        gg.alert("Không tìm thấy rồng.")
        return nil
    end
    local choice = gg.choice(list, nil, "Chọn rồng:")
    return choice and tonumber(codes[choice]) or nil
end

-- Tìm và sửa dãy input1;-1;0:: thành 1011,1012,... rồi ẩn GG
function handleInput1AndReplace()
    local data = fetchDragonData()
    if not data then return nil end
    local input1 = searchDragonCode(data)
    if not input1 then return nil end

    gg.clearResults()
    local searchStr = tostring(input1) .. ";-1;0::"
    gg.searchNumber(searchStr, gg.TYPE_DWORD)
    gg.refineNumber(tostring(input1), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("Không tìm thấy chuỗi cần tìm với input1!")
        return nil
    end
    for i = 1, #results do
        results[i].value = 1010 + i -- 1011, 1012,...
    end
    gg.setValues(results)
    gg.setVisible(false)
    return results, input1
end

-- Khi người mở lại GG, nhập input2, lọc và sửa thành input1, copy offset
function onGGVisible(input1)
    local data = fetchDragonData()
    if not data then return end
    local input2 = searchDragonCode(data)
    if not input2 then return end

    gg.refineNumber(tostring(input2), gg.TYPE_DWORD)
    local results = gg.getResults(500)
    if #results == 0 then
        gg.alert("Không tìm thấy input2 trong bộ nhớ!")
        return
    end
    -- Sửa tất cả giá trị input2 thành input1 ban đầu
    for i = 1, #results do
        results[i].value = input1
    end
    gg.setValues(results)

    -- Tìm địa chỉ chứa input1
    local baseEntry = nil
    for _, r in ipairs(results) do
        if r.value == input1 then
            baseEntry = r
            break
        end
    end
    if not baseEntry then
        gg.alert("Không tìm thấy địa chỉ chứa input1!")
        return
    end

    gg.gotoAddress(baseEntry.address)

    -- Tính địa chỉ offset theo byte (DWORD = 4 bytes)
    local addr_base = baseEntry.address
    local offset12_addr = addr_base + 12 * 4
    local offset13_addr = addr_base + 13 * 4
    local offset14_addr = addr_base + 14 * 4
    local offset15_addr = addr_base + 15 * 4

    -- Lấy giá trị offset 15
    local val15_res = gg.getValues({{address=offset15_addr, flags=gg.TYPE_DWORD, count=1}})
    if not val15_res or not val15_res[1] then
        gg.alert("Không lấy được giá trị offset 15.")
        return
    end
    local val15 = val15_res[1].value

    -- Gán giá trị offset 15 vào offset 12,13,14
    local setVals = {
        {address=offset12_addr, flags=gg.TYPE_DWORD, value=val15},
        {address=offset13_addr, flags=gg.TYPE_DWORD, value=val15},
        {address=offset14_addr, flags=gg.TYPE_DWORD, value=val15},
    }
    gg.setValues(setVals)
    gg.toast("Đã sao chép offset 15 vào 12, 13, 14.")
end

-- Main
local started = false
local input1Global = nil

function main()
    local results, input1 = handleInput1AndReplace()
    if results then
        started = true
        input1Global = input1
        gg.toast("Đã xử lý input1. Mở GG để tiếp tục thao tác input2.")
    end
end

main()

while true do
    if gg.isVisible(true) and started then
        gg.setVisible(false)
        onGGVisible(input1Global)
        started = false
    end
end
  end
-- Chạy menu
while true do
  if gg.isVisible(true) then
    gg.setVisible(false)
    mainMenu()
  end
  end
